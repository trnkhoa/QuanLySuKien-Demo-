import json
import os
from tkinter import *
from tkinter import messagebox, ttk
from datetime import datetime, timedelta
import hashlib
import requests
import uuid


# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ƒë·∫øn c√°c t·ªáp d·ªØ li·ªáu JSON ƒë·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng, s·ª± ki·ªán v√† y√™u c·∫ßu s·ª± ki·ªán
USERS_FILE = "users.json"
EVENTS_FILE = "events.json"
REQUESTS_FILE = "event_requests.json"

# Kh·ªüi t·∫°o c√°c t·ªáp d·ªØ li·ªáu n·∫øu ch∆∞a t·ªìn t·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ·ª©ng d·ª•ng ho·∫°t ƒë·ªông ngay t·ª´ l·∫ßn ch·∫°y ƒë·∫ßu ti√™n
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, 'w') as f:
        json.dump({"admin": {"password": "21232f297a57a5a743894a0e4a801fc3", "role": "admin", "balance": 0}}, f)

if not os.path.exists(EVENTS_FILE):
    with open(EVENTS_FILE, 'w') as f:
        json.dump([], f)

if not os.path.exists(REQUESTS_FILE):
    with open(REQUESTS_FILE, 'w') as f:
        json.dump([], f)

class EventManagementApp:
    def __init__(self, root):
        self.root = root
        self.root.title("H·ªá Th·ªëng Qu·∫£n L√Ω S·ª± Ki·ªán")
        self.root.geometry("1000x600")
        self.root.configure(bg="#0078D7")  

        self.current_user = None
        self.user_role = None

        # T√πy ch·ªânh giao di·ªán cho b·∫£ng Treeview (m√†u s·∫Øc, k√≠ch th∆∞·ªõc, ki·ªÉu ch·ªØ)
        style = ttk.Style()
        style.configure("Treeview",
                        background="#FFFFFF",
                        foreground="#000000",
                        rowheight=25,
                        fieldbackground="#FFFFFF")
        style.configure("Treeview.Heading",
                        background="#0078D7",
                        foreground="#0000FF",  
                        font=("Arial", 10, "bold"))
        style.map("Treeview",
                  background=[('selected', '#005BB5')])

        self.setup_login_ui()

    def setup_login_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ƒëƒÉng nh·∫≠p ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin x√°c th·ª±c"""
        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)
        
        try:
            img = Image.open("logo.png")  # S·ª≠ d·ª•ng c√πng logo.png
            img = img.resize((100, 100), Image.LANCZOS)
            self.register_logo_img = ImageTk.PhotoImage(img)
            Label(frame, image=self.register_logo_img, bg="#0078D7").pack(pady=10)
        except:
            # N·∫øu kh√¥ng c√≥ logo, hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng m·∫∑c ƒë·ªãnh
            Label(frame, text="üé´", font=("Arial", 40), bg="#0078D7", fg="#FFFFFF").pack(pady=10)
        
        Label(frame, text="ƒêƒÉng Nh·∫≠p H·ªá Th·ªëng", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=20)

        Label(frame, text="T√™n ƒëƒÉng nh·∫≠p:", bg="#0078D7", fg="#FFFFFF").pack()
        self.username_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.username_entry.pack(pady=5)

        Label(frame, text="M·∫≠t kh·∫©u:", bg="#0078D7", fg="#FFFFFF").pack()
        self.password_entry = Entry(frame, show="*", bg="#FFFFFF", fg="#000000")
        self.password_entry.pack(pady=5)

        Button(frame, text="ƒêƒÉng nh·∫≠p", command=self.login, bg="#FFFFFF", fg="#0078D7").pack(pady=20)
        Button(frame, text="ƒêƒÉng k√Ω t√†i kho·∫£n", command=self.setup_register_ui, bg="#FFFFFF", fg="#0078D7").pack()

    def setup_register_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ƒëƒÉng k√Ω"""
        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)
        
        try:
            img = Image.open("logo.png")  # S·ª≠ d·ª•ng c√πng logo.png
            img = img.resize((100, 100), Image.LANCZOS)
            self.register_logo_img = ImageTk.PhotoImage(img)
            Label(frame, image=self.register_logo_img, bg="#0078D7").pack(pady=10)
        except:
            # N·∫øu kh√¥ng c√≥ logo, hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng m·∫∑c ƒë·ªãnh
            Label(frame, text="üé´", font=("Arial", 40), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        Label(frame, text="ƒêƒÉng K√Ω T√†i Kho·∫£n", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=20)

        Label(frame, text="T√™n ƒëƒÉng nh·∫≠p:", bg="#0078D7", fg="#FFFFFF").pack()
        self.reg_username_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.reg_username_entry.pack(pady=5)

        Label(frame, text="M·∫≠t kh·∫©u:", bg="#0078D7", fg="#FFFFFF").pack()
        self.reg_password_entry = Entry(frame, show="*", bg="#FFFFFF", fg="#000000")
        self.reg_password_entry.pack(pady=5)

        Label(frame, text="X√°c nh·∫≠n m·∫≠t kh·∫©u:", bg="#0078D7", fg="#FFFFFF").pack()
        self.reg_confirm_password_entry = Entry(frame, show="*", bg="#FFFFFF", fg="#000000")
        self.reg_confirm_password_entry.pack(pady=5)

        Button(frame, text="ƒêƒÉng k√Ω", command=self.register_user, bg="#FFFFFF", fg="#0078D7").pack(pady=20)
        Button(frame, text="Quay l·∫°i ƒëƒÉng nh·∫≠p", command=self.setup_login_ui, bg="#FFFFFF", fg="#0078D7").pack()

    def setup_main_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ch√≠nh c·ªßa ·ª©ng d·ª•ng d·ª±a tr√™n vai tr√≤ ng∆∞·ªùi d√πng"""
        self.clear_window()

        menubar = Menu(self.root, bg="#0078D7", fg="#FFFFFF")
        file_menu = Menu(menubar, tearoff=0, bg="#0078D7", fg="#FFFFFF")
        file_menu.add_command(label="N·∫°p ti·ªÅn", command=self.deposit_money_ui)
        file_menu.add_command(label="ƒêƒÉng xu·∫•t", command=self.logout)
        file_menu.add_command(label="Tho√°t", command=self.root.quit)
        menubar.add_cascade(label="T·ªáp", menu=file_menu)

        events_menu = Menu(menubar, tearoff=0, bg="#0078D7", fg="#FFFFFF")
        events_menu.add_command(label="Xem s·ª± ki·ªán", command=self.show_events)
        if self.user_role == "admin":
            events_menu.add_command(label="Th√™m s·ª± ki·ªán", command=self.add_event_ui)
            events_menu.add_command(label="Qu·∫£n l√Ω y√™u c·∫ßu s·ª± ki·ªán", command=self.manage_event_requests_ui)
        else:
            events_menu.add_command(label="Y√™u c·∫ßu th√™m s·ª± ki·ªán", command=self.request_event_ui)
        events_menu.add_command(label="ƒê·∫∑t v√©", command=self.book_ticket_ui)
        if self.user_role == "admin":
            events_menu.add_command(label="Th·ªëng k√™", command=self.show_statistics)
        menubar.add_cascade(label="S·ª± ki·ªán", menu=events_menu)

        if self.user_role == "admin":
            admin_menu = Menu(menubar, tearoff=0, bg="#0078D7", fg="#FFFFFF")
            admin_menu.add_command(label="Qu·∫£n l√Ω ng∆∞·ªùi d√πng", command=self.manage_users_ui)
            menubar.add_cascade(label="Qu·∫£n tr·ªã", menu=admin_menu)

        self.root.config(menu=menubar)

        users = self.load_users()
        balance = users[self.current_user].get('balance', 0)
        Label(self.root, text=f"S·ªë d∆∞ v√≠: {balance:,} VND", font=("Arial", 12), bg="#0078D7", fg="#FFFFFF").pack(anchor=NE, padx=10)

        buttons_frame = Frame(self.root, bg="#0078D7")
        buttons_frame.pack(pady=10)
        Button(buttons_frame, text="N·∫°p ti·ªÅn", command=self.deposit_money_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="ƒêƒÉng xu·∫•t", command=self.logout, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

        self.show_events()

    def deposit_money_ui(self):
        """Thi·∫øt k·∫ø giao di·ªán n·∫°p ti·ªÅn v√†o v√≠, hi·ªÉn th·ªã s·ªë d∆∞ hi·ªán t·∫°i"""
        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)

        Label(frame, text="N·∫°p Ti·ªÅn V√†o V√≠", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        users = self.load_users()
        balance = users[self.current_user].get('balance', 0)
        Label(frame, text=f"S·ªë d∆∞ hi·ªán t·∫°i: {balance:,} VND", bg="#0078D7", fg="#FFFFFF").pack(pady=5)

        Label(frame, text="S·ªë ti·ªÅn n·∫°p (VND):", bg="#0078D7", fg="#FFFFFF").pack()
        self.deposit_amount_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.deposit_amount_entry.pack(pady=5)

        buttons_frame = Frame(frame, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="N·∫°p ti·ªÅn", command=self.deposit_money, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="Quay l·∫°i", command=self.setup_main_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def manage_users_ui(self):
        """X√¢y d·ª±ng giao di·ªán qu·∫£n l√Ω ng∆∞·ªùi d√πng (ch·ªâ admin), h·ªó tr·ª£ th√™m/x√≥a/thay ƒë·ªïi vai tr√≤"""
        self.clear_window()

        Label(self.root, text="Qu·∫£n L√Ω Ng∆∞·ªùi D√πng", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        self.users_tree = ttk.Treeview(self.root, columns=("Username", "Role", "Balance"), show="headings")
        self.users_tree.heading("Username", text="T√™n ƒëƒÉng nh·∫≠p")
        self.users_tree.heading("Role", text="Vai tr√≤")
        self.users_tree.heading("Balance", text="S·ªë d∆∞ v√≠")
        self.users_tree.pack(fill=BOTH, expand=True, padx=10, pady=10)

        self.load_users_to_tree()

        buttons_frame = Frame(self.root, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="Th√™m ng∆∞·ªùi d√πng", command=self.add_user_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="X√≥a ng∆∞·ªùi d√πng", command=self.delete_user, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="Thay ƒë·ªïi vai tr√≤", command=self.change_user_role, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="Quay l·∫°i", command=self.setup_main_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def show_events(self):
        """Hi·ªÉn th·ªã danh s√°ch s·ª± ki·ªán trong b·∫£ng Treeview v·ªõi th√¥ng tin chi ti·∫øt"""
        self.clear_window()

        Label(self.root, text="Danh S√°ch S·ª± Ki·ªán", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        users = self.load_users()
        balance = users[self.current_user].get('balance', 0)
        Label(self.root, text=f"S·ªë d∆∞ v√≠: {balance:,} VND", font=("Arial", 12), bg="#0078D7", fg="#FFFFFF").pack(anchor=NE, padx=10)

        self.events_tree = ttk.Treeview(self.root, columns=("ID", "T√™n", "Ng√†y", "ƒê·ªãa ƒëi·ªÉm", "M√¥ t·∫£", "S·ªë ng∆∞·ªùi", "Gi√° v√©"), show="headings", selectmode="extended")
        self.events_tree.heading("ID", text="ID")
        self.events_tree.heading("T√™n", text="T√™n s·ª± ki·ªán")
        self.events_tree.heading("Ng√†y", text="Ng√†y di·ªÖn ra")
        self.events_tree.heading("ƒê·ªãa ƒëi·ªÉm", text="ƒê·ªãa ƒëi·ªÉm")
        self.events_tree.heading("M√¥ t·∫£", text="M√¥ t·∫£")
        self.events_tree.heading("S·ªë ng∆∞·ªùi", text="S·ªë ng∆∞·ªùi tham gia")
        self.events_tree.heading("Gi√° v√©", text="Gi√° v√© (VND)")
        self.events_tree.column("ID", width=50)
        self.events_tree.column("M√¥ t·∫£", width=300)
        self.events_tree.column("S·ªë ng∆∞·ªùi", width=100)
        self.events_tree.column("Gi√° v√©", width=100)
        self.events_tree.pack(fill=BOTH, expand=True, padx=10, pady=10)

        self.load_events_to_tree()

        buttons_frame = Frame(self.root, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="N·∫°p ti·ªÅn", command=self.deposit_money_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        if self.user_role == "admin":
            Button(buttons_frame, text="Th√™m s·ª± ki·ªán", command=self.add_event_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
            Button(buttons_frame, text="Qu·∫£n l√Ω y√™u c·∫ßu s·ª± ki·ªán", command=self.manage_event_requests_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
            Button(buttons_frame, text="Nh·∫≠p t·ª´ API", command=self.import_events_from_web, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
            Button(buttons_frame, text="S·ª≠a s·ª± ki·ªán", command=self.edit_event_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        else:
            Button(buttons_frame, text="Y√™u c·∫ßu th√™m s·ª± ki·ªán", command=self.request_event_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="X√≥a s·ª± ki·ªán", command=self.delete_events, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="ƒê·∫∑t v√©", command=self.book_ticket_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        if self.user_role == "admin":
            Button(buttons_frame, text="Th·ªëng k√™", command=self.show_statistics, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
            Button(buttons_frame, text="Qu·∫£n l√Ω ng∆∞·ªùi d√πng", command=self.manage_users_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="ƒêƒÉng xu·∫•t", command=self.logout, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def show_statistics(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ doanh thu s·ª± ki·ªán trong b·∫£ng Treeview (ch·ªâ admin)"""
        if self.user_role != "admin":
            messagebox.showerror("L·ªói", "Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ quy·ªÅn xem th·ªëng k√™")
            return

        self.clear_window()

        Label(self.root, text="Th·ªëng K√™ Doanh Thu", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        total_revenue = 0
        events = self.load_events()

        stats_tree = ttk.Treeview(self.root, columns=("ID", "T√™n", "S·ªë v√©", "Gi√° v√©", "Doanh thu"), show="headings")
        stats_tree.heading("ID", text="ID")
        stats_tree.heading("T√™n", text="T√™n s·ª± ki·ªán")
        stats_tree.heading("S·ªë v√©", text="S·ªë v√© ƒë√£ b√°n")
        stats_tree.heading("Gi√° v√©", text="Gi√° v√© (VND)")
        stats_tree.heading("Doanh thu", text="Doanh thu (VND)")
        stats_tree.column("ID", width=50)
        stats_tree.column("S·ªë v√©", width=100)
        stats_tree.column("Gi√° v√©", width=100)
        stats_tree.column("Doanh thu", width=150)
        stats_tree.pack(fill=BOTH, expand=True, padx=10, pady=10)

        for event in events:
            participants = event.get('current_participants', 0)
            price = event.get('price', 0)
            revenue = participants * price
            total_revenue += revenue
            stats_tree.insert("", "end", values=(
                event['id'],
                event['name'],
                participants,
                f"{price:,}",
                f"{revenue:,}"
            ))

        Label(self.root, text=f"T·ªïng doanh thu t·∫•t c·∫£ s·ª± ki·ªán: {total_revenue:,} VND",
              font=("Arial", 12, "bold"), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        buttons_frame = Frame(self.root, bg="#0078D7")
        buttons_frame.pack(pady=10)
        Button(buttons_frame, text="Quay l·∫°i", command=self.show_events, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def request_event_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán y√™u c·∫ßu th√™m s·ª± ki·ªán cho ng∆∞·ªùi d√πng th∆∞·ªùng"""
        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)

        Label(frame, text="Y√™u C·∫ßu Th√™m S·ª± Ki·ªán", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        Label(frame, text="T√™n s·ª± ki·ªán:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_name_entry = Entry(frame, width=50, bg="#FFFFFF", fg="#000000")
        self.event_name_entry.pack(pady=5)

        Label(frame, text="Ng√†y di·ªÖn ra (dd/mm/yyyy):", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_date_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_date_entry.pack(pady=5)

        Label(frame, text="ƒê·ªãa ƒëi·ªÉm:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_location_entry = Entry(frame, width=50, bg="#FFFFFF", fg="#000000")
        self.event_location_entry.pack(pady=5)

        Label(frame, text="S·ªë ng∆∞·ªùi tham gia t·ªëi ƒëa:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_capacity_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_capacity_entry.pack(pady=5)

        Label(frame, text="Gi√° v√© (VND):", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_price_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_price_entry.pack(pady=5)

        Label(frame, text="M√¥ t·∫£:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_description_entry = Text(frame, width=50, height=5, bg="#FFFFFF", fg="#000000")
        self.event_description_entry.pack(pady=5)

        buttons_frame = Frame(frame, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="G·ª≠i y√™u c·∫ßu", command=self.send_event_request, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="Nh·∫≠p t·ª´ API", command=self.request_event_from_web, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="H·ªßy", command=self.show_events, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def add_event_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán th√™m s·ª± ki·ªán (ch·ªâ d√†nh cho admin)"""
        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)

        Label(frame, text="Th√™m S·ª± Ki·ªán M·ªõi", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        Label(frame, text="T√™n s·ª± ki·ªán:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_name_entry = Entry(frame, width=50, bg="#FFFFFF", fg="#000000")
        self.event_name_entry.pack(pady=5)

        Label(frame, text="Ng√†y di·ªÖn ra (dd/mm/yyyy):", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_date_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_date_entry.pack(pady=5)

        Label(frame, text="ƒê·ªãa ƒëi·ªÉm:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_location_entry = Entry(frame, width=50, bg="#FFFFFF", fg="#000000")
        self.event_location_entry.pack(pady=5)

        Label(frame, text="S·ªë ng∆∞·ªùi tham gia t·ªëi ƒëa:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_capacity_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_capacity_entry.pack(pady=5)

        Label(frame, text="Gi√° v√© (VND):", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_price_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_price_entry.pack(pady=5)

        Label(frame, text="M√¥ t·∫£:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_description_entry = Text(frame, width=50, height=5, bg="#FFFFFF", fg="#000000")
        self.event_description_entry.pack(pady=5)

        buttons_frame = Frame(frame, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="L∆∞u", command=self.save_event, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="H·ªßy", command=self.show_events, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def manage_event_requests_ui(self):
        """Hi·ªÉn th·ªã danh s√°ch y√™u c·∫ßu s·ª± ki·ªán (admin) v·ªõi th√¥ng tin t∆∞∆°ng t·ª± v√† ng∆∞·ªùi y√™u c·∫ßu"""
        self.clear_window()

        Label(self.root, text="Qu·∫£n L√Ω Y√™u C·∫ßu S·ª± Ki·ªán", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        self.requests_tree = ttk.Treeview(self.root, columns=("ID", "T√™n", "Ng√†y", "ƒê·ªãa ƒëi·ªÉm", "M√¥ t·∫£", "S·ªë ng∆∞·ªùi", "Gi√° v√©", "Ng∆∞·ªùi y√™u c·∫ßu"), show="headings", selectmode="extended")
        self.requests_tree.heading("ID", text="ID")
        self.requests_tree.heading("T√™n", text="T√™n s·ª± ki·ªán")
        self.requests_tree.heading("Ng√†y", text="Ng√†y di·ªÖn ra")
        self.requests_tree.heading("ƒê·ªãa ƒëi·ªÉm", text="ƒê·ªãa ƒëi·ªÉm")
        self.requests_tree.heading("M√¥ t·∫£", text="M√¥ t·∫£")
        self.requests_tree.heading("S·ªë ng∆∞·ªùi", text="S·ªë ng∆∞·ªùi t·ªëi ƒëa")
        self.requests_tree.heading("Gi√° v√©", text="Gi√° v√© (VND)")
        self.requests_tree.heading("Ng∆∞·ªùi y√™u c·∫ßu", text="Ng∆∞·ªùi y√™u c·∫ßu")
        self.requests_tree.column("ID", width=50)
        self.requests_tree.column("M√¥ t·∫£", width=200)
        self.requests_tree.column("S·ªë ng∆∞·ªùi", width=100)
        self.requests_tree.column("Gi√° v√©", width=100)
        self.requests_tree.column("Ng∆∞·ªùi y√™u c·∫ßu", width=100)
        self.requests_tree.pack(fill=BOTH, expand=True, padx=10, pady=10)

        self.load_requests_to_tree()

        buttons_frame = Frame(self.root, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="Ch·∫•p nh·∫≠n y√™u c·∫ßu", command=self.accept_event_requests, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="T·ª´ ch·ªëi y√™u c·∫ßu", command=self.reject_event_requests, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="Quay l·∫°i", command=self.show_events, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def edit_event_ui(self):
        """S·ª≠a th√¥ng tin s·ª± ki·ªán (admin ho·∫∑c ng∆∞·ªùi t·∫°o): C·∫≠p nh·∫≠t t√™n, ng√†y, ƒë·ªãa ƒëi·ªÉm, s·ª©c ch·ª©a, gi√° v√©, m√¥ t·∫£ trong events.json."""
        selected_item = self.events_tree.selection()
        if not selected_item:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt s·ª± ki·ªán ƒë·ªÉ s·ª≠a")
            return

        if len(selected_item) > 1:
            messagebox.showwarning("C·∫£nh b√°o", "Ch·ªâ c√≥ th·ªÉ s·ª≠a m·ªôt s·ª± ki·ªán t·∫°i m·ªôt th·ªùi ƒëi·ªÉm")
            return

        event_id = self.events_tree.item(selected_item[0])['values'][0]

        events = self.load_events()
        event = next((e for e in events if e['id'] == str(event_id)), None)

        if not event:
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID {event_id}")
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID {event_id} trong events.json")
            return

        if self.user_role != "admin" and event.get('created_by', '') != self.current_user:
            messagebox.showerror("L·ªói", "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a s·ª± ki·ªán n√†y")
            return

        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)

        Label(frame, text="S·ª≠a S·ª± Ki·ªán", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        Label(frame, text="T√™n s·ª± ki·ªán:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_name_entry = Entry(frame, width=50, bg="#FFFFFF", fg="#000000")
        self.event_name_entry.insert(0, event['name'])
        self.event_name_entry.pack(pady=5)

        Label(frame, text="Ng√†y di·ªÖn ra (dd/mm/yyyy):", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_date_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_date_entry.insert(0, event['date'])
        self.event_date_entry.pack(pady=5)

        Label(frame, text="ƒê·ªãa ƒëi·ªÉm:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_location_entry = Entry(frame, width=50, bg="#FFFFFF", fg="#000000")
        self.event_location_entry.insert(0, event['location'])
        self.event_location_entry.pack(pady=5)

        Label(frame, text="S·ªë ng∆∞·ªùi tham gia t·ªëi ƒëa:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_capacity_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_capacity_entry.insert(0, str(event.get('capacity', 0)))
        self.event_capacity_entry.pack(pady=5)

        Label(frame, text="Gi√° v√© (VND):", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_price_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.event_price_entry.insert(0, str(event.get('price', 0)))
        self.event_price_entry.pack(pady=5)

        Label(frame, text="M√¥ t·∫£:", bg="#0078D7", fg="#FFFFFF").pack()
        self.event_description_entry = Text(frame, width=50, height=5, bg="#FFFFFF", fg="#000000")
        self.event_description_entry.insert("1.0", event['description'])
        self.event_description_entry.pack(pady=5)

        buttons_frame = Frame(frame, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="L∆∞u", command=lambda: self.save_event(event_id), bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="H·ªßy", command=self.show_events, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def book_ticket_ui(self):
        """Thi·∫øt k·∫ø giao di·ªán ƒë·∫∑t v√© s·ª± ki·ªán, h·ªó tr·ª£ ch·ªçn s·ªë l∆∞·ª£ng v√©"""
        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)

        Label(frame, text="ƒê·∫∑t V√© S·ª± Ki·ªán", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        users = self.load_users()
        balance = users[self.current_user].get('balance', 0)
        Label(frame, text=f"S·ªë d∆∞ v√≠: {balance:,} VND", bg="#0078D7", fg="#FFFFFF").pack(pady=5)

        self.events_tree = ttk.Treeview(frame, columns=("ID", "T√™n", "Ng√†y", "ƒê·ªãa ƒëi·ªÉm", "M√¥ t·∫£", "S·ªë ng∆∞·ªùi", "Gi√° v√©"), show="headings")
        self.events_tree.heading("ID", text="ID")
        self.events_tree.heading("T√™n", text="T√™n s·ª± ki·ªán")
        self.events_tree.heading("Ng√†y", text="Ng√†y di·ªÖn ra")
        self.events_tree.heading("ƒê·ªãa ƒëi·ªÉm", text="ƒê·ªãa ƒëi·ªÉm")
        self.events_tree.heading("M√¥ t·∫£", text="M√¥ t·∫£")
        self.events_tree.heading("S·ªë ng∆∞·ªùi", text="S·ªë ng∆∞·ªùi tham gia")
        self.events_tree.heading("Gi√° v√©", text="Gi√° v√© (VND)")
        self.events_tree.column("ID", width=30)
        self.events_tree.column("M√¥ t·∫£", width=300)
        self.events_tree.column("S·ªë ng∆∞·ªùi", width=100)
        self.events_tree.column("Gi√° v√©", width=100)
        self.events_tree.pack(fill=BOTH, expand=True, padx=10, pady=10)

        self.load_events_to_tree()

        quantity_frame = Frame(frame, bg="#0078D7")
        quantity_frame.pack(pady=10)
        Label(quantity_frame, text="S·ªë l∆∞·ª£ng v√©:", bg="#0078D7", fg="#FFFFFF").pack(side=LEFT)
        self.ticket_quantity_entry = Entry(quantity_frame, width=5, bg="#FFFFFF", fg="#000000")
        self.ticket_quantity_entry.insert(0, "1")
        self.ticket_quantity_entry.pack(side=LEFT, padx=5)
        Button(quantity_frame, text="-", command=self.decrement_ticket_quantity, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(quantity_frame, text="+", command=self.increment_ticket_quantity, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

        buttons_frame = Frame(frame, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="ƒê·∫∑t v√©", command=self.book_ticket, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="N·∫°p ti·ªÅn", command=self.deposit_money_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="Quay l·∫°i", command=self.setup_main_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def increment_ticket_quantity(self):
        """TƒÉng s·ªë l∆∞·ª£ng v√© trong √¥ nh·∫≠p khi nh·∫•n n√∫t '+'"""
        try:
            current = int(self.ticket_quantity_entry.get())
            self.ticket_quantity_entry.delete(0, END)
            self.ticket_quantity_entry.insert(0, str(current + 1))
        except ValueError:
            self.ticket_quantity_entry.delete(0, END)
            self.ticket_quantity_entry.insert(0, "1")

    def decrement_ticket_quantity(self):
        """Gi·∫£m s·ªë l∆∞·ª£ng v√© trong √¥ nh·∫≠p khi nh·∫•n n√∫t '-' (t·ªëi thi·ªÉu 1)"""
        try:
            current = int(self.ticket_quantity_entry.get())
            if current > 1:
                self.ticket_quantity_entry.delete(0, END)
                self.ticket_quantity_entry.insert(0, str(current - 1))
        except ValueError:
            self.ticket_quantity_entry.delete(0, END)
            self.ticket_quantity_entry.insert(0, "1")

    def add_user_ui(self):
        """T·∫°o giao di·ªán th√™m ng∆∞·ªùi d√πng m·ªõi v·ªõi th√¥ng tin t√™n, m·∫≠t kh·∫©u v√† vai tr√≤ (ch·ªâ admin)"""
        self.clear_window()

        frame = Frame(self.root, bg="#0078D7")
        frame.pack(expand=True)

        Label(frame, text="Th√™m Ng∆∞·ªùi D√πng M·ªõi", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        Label(frame, text="T√™n ƒëƒÉng nh·∫≠p:", bg="#0078D7", fg="#FFFFFF").pack()
        self.new_username_entry = Entry(frame, bg="#FFFFFF", fg="#000000")
        self.new_username_entry.pack(pady=5)

        Label(frame, text="M·∫≠t kh·∫©u:", bg="#0078D7", fg="#FFFFFF").pack()
        self.new_password_entry = Entry(frame, show="*", bg="#FFFFFF", fg="#000000")
        self.new_password_entry.pack(pady=5)

        Label(frame, text="Vai tr√≤:", bg="#0078D7", fg="#FFFFFF").pack()
        self.new_role_var = StringVar(value="user")
        Radiobutton(frame, text="Ng∆∞·ªùi d√πng", variable=self.new_role_var, value="user", bg="#0078D7", fg="#FFFFFF", selectcolor="#005BB5").pack()
        Radiobutton(frame, text="Qu·∫£n tr·ªã", variable=self.new_role_var, value="admin", bg="#0078D7", fg="#FFFFFF", selectcolor="#005BB5").pack()

        buttons_frame = Frame(frame, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="L∆∞u", command=self.save_new_user, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="H·ªßy", command=self.manage_users_ui, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def load_users(self):
        """T·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ t·ªáp JSON"""
        try:
            with open(USERS_FILE, 'r') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"L·ªói khi t·∫£i ng∆∞·ªùi d√πng: {e}")
            return {}

    def save_users(self, users):
        """L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o t·ªáp JSON"""
        try:
            with open(USERS_FILE, 'w') as f:
                json.dump(users, f, indent=4)
        except Exception as e:
            print(f"L·ªói khi l∆∞u ng∆∞·ªùi d√πng: {e}")
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng")

    def load_events(self):
        """T·∫£i d·ªØ li·ªáu s·ª± ki·ªán t·ª´ t·ªáp JSON"""
        try:
            with open(EVENTS_FILE, 'r') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"L·ªói khi t·∫£i s·ª± ki·ªán: {e}")
            return []

    def save_events(self, events):
        """L∆∞u d·ªØ li·ªáu s·ª± ki·ªán v√†o t·ªáp JSON"""
        try:
            with open(EVENTS_FILE, 'w') as f:
                json.dump(events, f, indent=4)
        except Exception as e:
            print(f"L·ªói khi l∆∞u s·ª± ki·ªán: {e}")
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu s·ª± ki·ªán")

    def load_requests(self):
        """T·∫£i y√™u c·∫ßu s·ª± ki·ªán t·ª´ t·ªáp JSON"""
        try:
            with open(REQUESTS_FILE, 'r') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            print(f"L·ªói khi t·∫£i y√™u c·∫ßu: {e}")
            return []

    def save_requests(self, requests):
        """L∆∞u y√™u c·∫ßu s·ª± ki·ªán v√†o t·ªáp JSON"""
        try:
            with open(REQUESTS_FILE, 'w') as f:
                json.dump(requests, f, indent=4)
        except Exception as e:
            print(f"L·ªói khi l∆∞u y√™u c·∫ßu: {e}")
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l∆∞u y√™u c·∫ßu s·ª± ki·ªán")

    def load_users_to_tree(self):
        """C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng v√†o b·∫£ng Treeview ƒë·ªÉ hi·ªÉn th·ªã"""
        users = self.load_users()
        for item in self.users_tree.get_children():
            self.users_tree.delete(item)
        for username, data in users.items():
            self.users_tree.insert("", "end", values=(username, data['role'], f"{data.get('balance', 0):,}"))

    def load_events_to_tree(self):
        """C·∫≠p nh·∫≠t danh s√°ch s·ª± ki·ªán v√†o b·∫£ng Treeview ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt"""
        events = self.load_events()
        for item in self.events_tree.get_children():
            self.events_tree.delete(item)
        for event in events:
            participants = f"{event.get('current_participants', 0)}/{event.get('capacity', 0)}"
            price = f"{event.get('price', 0):,}"
            self.events_tree.insert("", "end", values=(
                event['id'],
                event['name'],
                event['date'],
                event['location'],
                event['description'],
                participants,
                price
            ))

    def load_requests_to_tree(self):
        """C·∫≠p nh·∫≠t danh s√°ch y√™u c·∫ßu s·ª± ki·ªán v√†o b·∫£ng Treeview ƒë·ªÉ qu·∫£n l√Ω"""
        requests = self.load_requests()
        for item in self.requests_tree.get_children():
            self.requests_tree.delete(item)
        for request in requests:
            self.requests_tree.insert("", "end", values=(
                request['id'],
                request['name'],
                request['date'],
                request['location'],
                request['description'],
                request['capacity'],
                f"{request['price']:,}",
                request['requested_by']
            ))

    def hash_password(self, password):
        """M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng MD5 (ƒë∆°n gi·∫£n, trong m√¥i tr∆∞·ªùng s·∫£n xu·∫•t n√™n d√πng m√£ h√≥a m·∫°nh h∆°n)"""
        return hashlib.md5(password.encode()).hexdigest()

    def login(self):
        """X·ª≠ l√Ω ƒëƒÉng nh·∫≠p, ki·ªÉm tra t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u"""
        username = self.username_entry.get()
        password = self.password_entry.get()

        if not username or not password:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u")
            return

        users = self.load_users()

        if username not in users:
            messagebox.showerror("L·ªói", "T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i")
            return

        hashed_password = self.hash_password(password)
        if users[username]['password'] != hashed_password:
            messagebox.showerror("L·ªói", "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
            return

        self.current_user = username
        self.user_role = users[username]['role']
        self.setup_main_ui()

    def logout(self):
        """X·ª≠ l√Ω qu√° tr√¨nh ƒëƒÉng xu·∫•t"""
        self.current_user = None
        self.user_role = None
        self.setup_login_ui()

    def register_user(self):
        """X·ª≠ l√Ω ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi, ki·ªÉm tra th√¥ng tin v√† l∆∞u v√†o t·ªáp JSON"""
        username = self.reg_username_entry.get()
        password = self.reg_password_entry.get()
        confirm_password = self.reg_confirm_password_entry.get()

        if not username or not password:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u")
            return

        if password != confirm_password:
            messagebox.showerror("L·ªói", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp")
            return

        users = self.load_users()

        if username in users:
            messagebox.showerror("L·ªói", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i")
            return

        users[username] = {
            "password": self.hash_password(password),
            "role": "user",
            "balance": 0
        }

        self.save_users(users)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng")
        self.setup_login_ui()

    def deposit_money(self):
        """X·ª≠ l√Ω n·∫°p ti·ªÅn v√†o v√≠, c·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng"""
        amount = self.deposit_amount_entry.get()

        try:
            amount = int(amount)
            if amount <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("L·ªói", "S·ªë ti·ªÅn n·∫°p ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng")
            return

        users = self.load_users()
        users[self.current_user]['balance'] = users[self.current_user].get('balance', 0) + amount
        self.save_users(users)
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ n·∫°p {amount:,} VND. S·ªë d∆∞ m·ªõi: {users[self.current_user]['balance']:,} VND")
        self.setup_main_ui()

    def send_event_request(self):
        """G·ª≠i y√™u c·∫ßu t·∫°o s·ª± ki·ªán t·ªõi admin"""
        name = self.event_name_entry.get()
        date = self.event_date_entry.get()
        location = self.event_location_entry.get()
        capacity = self.event_capacity_entry.get()
        price = self.event_price_entry.get()
        description = self.event_description_entry.get("1.0", "end-1c")

        if not name or not date or not location or not capacity or not price:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
            return

        try:
            datetime.strptime(date, "%d/%m/%Y")
        except ValueError:
            messagebox.showerror("L·ªói", "Ng√†y kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (dd/mm/yyyy)")
            return

        try:
            capacity = int(capacity)
            price = int(price)
            if capacity <= 0 or price < 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("L·ªói", "S·ªë ng∆∞·ªùi tham gia t·ªëi ƒëa ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng v√† gi√° v√© kh√¥ng ƒë∆∞·ª£c √¢m")
            return

        requests = self.load_requests()
        request_id = str(uuid.uuid4())

        requests.append({
            "id": request_id,
            "name": name,
            "date": date,
            "location": location,
            "capacity": capacity,
            "price": price,
            "description": description,
            "requested_by": self.current_user
        })

        self.save_requests(requests)
        messagebox.showinfo("Th√†nh c√¥ng", "Y√™u c·∫ßu th√™m s·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi admin")
        self.show_events()

    def save_event(self, event_id=None):
        """L∆∞u ho·∫∑c c·∫≠p nh·∫≠t s·ª± ki·ªán, ki·ªÉm tra quy·ªÅn admin v√† d·ªØ li·ªáu h·ª£p l·ªá (ch·ªâ d√†nh cho admin)"""
        if self.user_role != "admin":
            messagebox.showerror("L·ªói", "Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ quy·ªÅn th√™m/s·ª≠a s·ª± ki·ªán")
            return

        name = self.event_name_entry.get()
        date = self.event_date_entry.get()
        location = self.event_location_entry.get()
        capacity = self.event_capacity_entry.get()
        price = self.event_price_entry.get()
        description = self.event_description_entry.get("1.0", "end-1c")

        if not name or not date or not location or not capacity or not price:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
            return

        try:
            datetime.strptime(date, "%d/%m/%Y")
        except ValueError:
            messagebox.showerror("L·ªói", "Ng√†y kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (dd/mm/yyyy)")
            return

        try:
            capacity = int(capacity)
            price = int(price)
            if capacity <= 0 or price < 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("L·ªói", "S·ªë ng∆∞·ªùi tham gia t·ªëi ƒëa ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng v√† gi√° v√© kh√¥ng ƒë∆∞·ª£c √¢m")
            return

        events = self.load_events()

        if event_id:
            for event in events:
                if event['id'] == str(event_id):
                    event['name'] = name
                    event['date'] = date
                    event['location'] = location
                    event['capacity'] = capacity
                    event['price'] = price
                    event['description'] = description
                    event['current_participants'] = event.get('current_participants', 0)
                    if event['current_participants'] > capacity:
                        messagebox.showerror("L·ªói", "S·ªë ng∆∞·ªùi tham gia hi·ªán t·∫°i v∆∞·ª£t qu√° s·ª©c ch·ª©a m·ªõi")
                        return
                    break
        else:
            new_id = str(max([int(e['id']) for e in events] or [0]) + 1)
            events.append({
                "id": new_id,
                "name": name,
                "date": date,
                "location": location,
                "capacity": capacity,
                "price": price,
                "current_participants": 0,
                "description": description,
                "created_by": self.current_user
            })

        self.save_events(events)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u s·ª± ki·ªán th√†nh c√¥ng")
        self.show_events()

    def delete_events(self):
        """X√≥a s·ª± ki·ªán (admin ho·∫∑c ng∆∞·ªùi t·∫°o): Lo·∫°i b·ªè s·ª± ki·ªán kh·ªèi events.json."""
        selected_items = self.events_tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·ª± ki·ªán ƒë·ªÉ x√≥a")
            return

        events = self.load_events()
        deleted_count = 0

        for item in selected_items:
            event_id = self.events_tree.item(item)['values'][0]
            event = next((e for e in events if e['id'] == str(event_id)), None)

            if not event:
                messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID {event_id}")
                print(f"L·ªói: Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID {event_id} trong events.json")
                continue

            if self.user_role != "admin" and event.get('created_by', '') != self.current_user:
                messagebox.showerror("L·ªói", f"B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·ª± ki·ªán '{event['name']}'")
                continue

            events = [e for e in events if e['id'] != str(event_id)]
            deleted_count += 1

        if deleted_count == 0:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c x√≥a")
            return

        if not messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a {deleted_count} s·ª± ki·ªán ƒë√£ ch·ªçn?"):
            return

        self.save_events(events)
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a {deleted_count} s·ª± ki·ªán th√†nh c√¥ng")
        self.show_events()

    def book_ticket(self):
        """X·ª≠ l√Ω ƒë·∫∑t v√©, ki·ªÉm tra s·ªë d∆∞ v√† s·ª©c ch·ª©a s·ª± ki·ªán"""
        selected_item = self.events_tree.selection()
        if not selected_item:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt s·ª± ki·ªán ƒë·ªÉ ƒë·∫∑t v√©")
            return

        event_id = self.events_tree.item(selected_item[0])['values'][0]

        events = self.load_events()
        event = next((e for e in events if e['id'] == str(event_id)), None)

        if not event:
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID {event_id}")
            print(f"L·ªói: Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán v·ªõi ID {event_id} trong events.json")
            return

        try:
            quantity = int(self.ticket_quantity_entry.get())
            if quantity <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("L·ªói", "S·ªë l∆∞·ª£ng v√© ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng")
            return

        current_participants = event.get('current_participants', 0)
        capacity = event.get('capacity', 0)
        price = event.get('price', 0)

        if current_participants + quantity > capacity:
            messagebox.showerror("L·ªói", f"S·ª± ki·ªán '{event['name']}' kh√¥ng ƒë·ªß v√©. S·ªë v√© c√≤n l·∫°i: {capacity - current_participants}")
            return

        users = self.load_users()
        balance = users[self.current_user].get('balance', 0)
        total_cost = price * quantity

        if balance < total_cost:
            messagebox.showerror("L·ªói", f"S·ªë d∆∞ kh√¥ng ƒë·ªß! C·∫ßn {total_cost:,} VND, hi·ªán c√≥ {balance:,} VND")
            return

        if not messagebox.askyesno("X√°c nh·∫≠n",
                                 f"X√°c nh·∫≠n ƒë·∫∑t {quantity} v√© cho s·ª± ki·ªán '{event['name']}'? T·ªïng gi√°: {total_cost:,} VND"):
            return

        event['current_participants'] += quantity
        users[self.current_user]['balance'] -= total_cost
        self.save_events(events)
        self.save_users(users)
        messagebox.showinfo("Th√†nh c√¥ng",
                           f"ƒê·∫∑t {quantity} v√© th√†nh c√¥ng! S·ªë ng∆∞·ªùi tham gia: {event['current_participants']}/{capacity}\n"
                           f"S·ªë d∆∞ c√≤n l·∫°i: {users[self.current_user]['balance']:,} VND")
        self.load_events_to_tree()

    def save_new_user(self):
        """L∆∞u ng∆∞·ªùi d√πng m·ªõi (ch·ªâ d√†nh cho admin)"""
        username = self.new_username_entry.get()
        password = self.new_password_entry.get()
        role = self.new_role_var.get()

        if not username or not password:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u")
            return

        users = self.load_users()

        if username in users:
            messagebox.showerror("L·ªói", "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i")
            return

        users[username] = {
            "password": self.hash_password(password),
            "role": role,
            "balance": 0
        }

        self.save_users(users)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng")
        self.manage_users_ui()

    def delete_user(self):
        """X√≥a ng∆∞·ªùi d√πng (admin): Lo·∫°i b·ªè t√†i kho·∫£n kh·ªèi users.json (tr·ª´ t√†i kho·∫£n admin v√† t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p)."""
        selected_item = self.users_tree.selection()
        if not selected_item:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a")
            return

        username = self.users_tree.item(selected_item[0])['values'][0]

        if username == "admin":
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n admin")
            return

        if username == self.current_user:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p")
            return

        if not messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng {username}?"):
            return

        users = self.load_users()
        users.pop(username, None)
        self.save_users(users)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng")
        self.load_users_to_tree()

    def change_user_role(self):
        """Thay ƒë·ªïi vai tr√≤ ng∆∞·ªùi d√πng (admin): Chuy·ªÉn ƒë·ªïi gi·ªØa "user" v√† "admin" trong users.json."""
        selected_item = self.users_tree.selection()
        if not selected_item:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ thay ƒë·ªïi vai tr√≤")
            return

        username = self.users_tree.item(selected_item[0])['values'][0]

        if username == "admin":
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ thay ƒë·ªïi vai tr√≤ c·ªßa admin")
            return

        users = self.load_users()
        current_role = users[username]['role']
        new_role = "admin" if current_role == "user" else "user"

        if not messagebox.askyesno("X√°c nh·∫≠n",
                                 f"Thay ƒë·ªïi vai tr√≤ c·ªßa {username} t·ª´ {current_role} th√†nh {new_role}?"):
            return

        users[username]['role'] = new_role
        self.save_users(users)
        messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ thay ƒë·ªïi vai tr√≤ th√†nh c√¥ng")
        self.load_users_to_tree()

    def request_event_from_web(self):
        """Hi·ªÉn th·ªã danh s√°ch s·ª± ki·ªán t·ª´ API ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn v√† g·ª≠i y√™u c·∫ßu"""
        try:
            url = "https://thongthai.work/simple_api/2001230374"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            imported_events = []
            for i, item in enumerate(data):
                event_date = (datetime.now() + timedelta(days=i+1)).strftime("%d/%m/%Y")
                event_data = {
                    "name": item.get('name', 'S·ª± Ki·ªán Kh√¥ng T√™n'),
                    "date": event_date,
                    "location": f"ƒê·ªãa ƒëi·ªÉm {i+1}",
                    "description": item.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£'),
                    "capacity": 100,
                    "price": item.get('price', 0) * 1000,
                    "current_participants": 0
                }
                imported_events.append(event_data)

            if not imported_events:
                messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o t·ª´ API")
                return

            self.show_web_events_for_request(imported_events)

        except requests.exceptions.HTTPError as http_err:
            messagebox.showerror("L·ªói HTTP", f"L·ªói khi g·ªçi API: {str(http_err)}")
            print(f"L·ªói HTTP: {http_err}")
        except requests.exceptions.ConnectionError:
            messagebox.showerror("L·ªói K·∫øt N·ªëi", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. Vui l√≤ng ki·ªÉm tra m·∫°ng.")
        except requests.exceptions.Timeout:
            messagebox.showerror("L·ªói Timeout", "Y√™u c·∫ßu API b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i sau.")
        except requests.exceptions.RequestException as req_err:
            messagebox.showerror("L·ªói Y√™u C·∫ßu", f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API: {str(req_err)}")
            print(f"L·ªói Y√™u C·∫ßu: {req_err}")
        except Exception as e:
            messagebox.showerror("L·ªói Kh√°c", f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
            print(f"L·ªói Kh√¥ng X√°c ƒê·ªãnh: {e}")

    def show_web_events_for_request(self, events):
        """Hi·ªÉn th·ªã s·ª± ki·ªán t·ª´ web ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn v√† y√™u c·∫ßu"""
        import_window = Toplevel(self.root)
        import_window.title("Y√™u C·∫ßu S·ª± Ki·ªán T·ª´ API")
        import_window.geometry("800x600")
        import_window.configure(bg="#0078D7")

        Label(import_window, text="Y√™u C·∫ßu S·ª± Ki·ªán T·ª´ API", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        tree = ttk.Treeview(import_window, columns=("ID", "T√™n", "Ng√†y", "ƒê·ªãa ƒëi·ªÉm", "M√¥ t·∫£", "S·ªë ng∆∞·ªùi", "Gi√° v√©"), show="headings", selectmode="extended")
        tree.heading("ID", text="ID")
        tree.heading("T√™n", text="T√™n s·ª± ki·ªán")
        tree.heading("Ng√†y", text="Ng√†y di·ªÖn ra")
        tree.heading("ƒê·ªãa ƒëi·ªÉm", text="ƒê·ªãa ƒëi·ªÉm")
        tree.heading("M√¥ t·∫£", text="M√¥ t·∫£")
        tree.heading("S·ªë ng∆∞·ªùi", text="S·ªë ng∆∞·ªùi t·ªëi ƒëa")
        tree.heading("Gi√° v√©", text="Gi√° v√© (VND)")
        tree.column("ID", width=50)
        tree.column("M√¥ t·∫£", width=300)
        tree.column("S·ªë ng∆∞·ªùi", width=100)
        tree.column("Gi√° v√©", width=100)
        tree.pack(fill=BOTH, expand=True, padx=10, pady=10)

        for i, event in enumerate(events, 1):
            tree.insert("", "end", values=(
                f"Temp-{i}",
                event['name'],
                event['date'],
                event['location'],
                event['description'],
                event['capacity'],
                f"{event['price']:,}"
            ))

        buttons_frame = Frame(import_window, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="G·ª≠i y√™u c·∫ßu",
               command=lambda: self.request_selected_web_events(tree, events), bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="ƒê√≥ng", command=import_window.destroy, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def request_selected_web_events(self, tree, imported_events):
        """G·ª≠i y√™u c·∫ßu cho c√°c s·ª± ki·ªán web ƒë√£ ch·ªçn"""
        selected_items = tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·ª± ki·ªán ƒë·ªÉ g·ª≠i y√™u c·∫ßu")
            return

        requests = self.load_requests()
        added_count = 0

        for item in selected_items:
            index = tree.index(item)
            event_data = imported_events[index]

            try:
                datetime.strptime(event_data['date'], "%d/%m/%Y")
            except ValueError:
                messagebox.showwarning("C·∫£nh b√°o", f"S·ª± ki·ªán '{event_data['name']}' c√≥ ng√†y kh√¥ng h·ª£p l·ªá, b·ªè qua.")
                continue

            request_id = str(uuid.uuid4())
            requests.append({
                "id": request_id,
                "name": event_data['name'],
                "date": event_data['date'],
                "location": event_data['location'],
                "capacity": event_data['capacity'],
                "price": event_data['price'],
                "description": event_data['description'],
                "requested_by": self.current_user
            })
            added_count += 1

        if added_count > 0:
            self.save_requests(requests)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ g·ª≠i y√™u c·∫ßu cho {added_count} s·ª± ki·ªán")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ y√™u c·∫ßu n√†o ƒë∆∞·ª£c g·ª≠i do l·ªói d·ªØ li·ªáu")
        self.show_events()

    def import_events_from_web(self):
        """Nh·∫≠p s·ª± ki·ªán t·ª´ web (ch·ªâ d√†nh cho admin)"""
        if self.user_role != "admin":
            messagebox.showerror("L·ªói", "Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ quy·ªÅn nh·∫≠p s·ª± ki·ªán tr·ª±c ti·∫øp")
            return

        try:
            url = "https://thongthai.work/simple_api/2001230374"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            imported_events = []
            for i, item in enumerate(data):
                event_date = (datetime.now() + timedelta(days=i+1)).strftime("%d/%m/%Y")
                event_data = {
                    "name": item.get('name', 'S·ª± Ki·ªán Kh√¥ng T√™n'),
                    "date": event_date,
                    "location": f"ƒê·ªãa ƒëi·ªÉm {i+1}",
                    "description": item.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£'),
                    "capacity": 100,
                    "price": item.get('price', 0) * 1000,
                    "current_participants": 0
                }
                imported_events.append(event_data)

            if not imported_events:
                messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o t·ª´ API")
                return

            self.show_imported_events(imported_events)

        except requests.exceptions.HTTPError as http_err:
            messagebox.showerror("L·ªói HTTP", f"L·ªói khi g·ªçi API: {str(http_err)}")
            print(f"L·ªói HTTP: {http_err}")
        except requests.exceptions.ConnectionError:
            messagebox.showerror("L·ªói K·∫øt N·ªëi", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. Vui l√≤ng ki·ªÉm tra m·∫°ng.")
        except requests.exceptions.Timeout:
            messagebox.showerror("L·ªói Timeout", "Y√™u c·∫ßu API b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i sau.")
        except requests.exceptions.RequestException as req_err:
            messagebox.showerror("L·ªói Y√™u C·∫ßu", f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi API: {str(req_err)}")
            print(f"L·ªói Y√™u C·∫ßu: {req_err}")
        except Exception as e:
            messagebox.showerror("L·ªói Kh√°c", f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
            print(f"L·ªói Kh√¥ng X√°c ƒê·ªãnh: {e}")

    def show_imported_events(self, events):
        """Hi·ªÉn th·ªã s·ª± ki·ªán ƒë√£ nh·∫≠p cho admin ch·ªçn v√† nh·∫≠p"""
        import_window = Toplevel(self.root)
        import_window.title("S·ª± Ki·ªán Nh·∫≠p T·ª´ API")
        import_window.geometry("800x600")
        import_window.configure(bg="#0078D7")

        Label(import_window, text="S·ª± Ki·ªán Nh·∫≠p T·ª´ API", font=("Arial", 16), bg="#0078D7", fg="#FFFFFF").pack(pady=10)

        tree = ttk.Treeview(import_window, columns=("ID", "T√™n", "Ng√†y", "ƒê·ªãa ƒëi·ªÉm", "M√¥ t·∫£", "S·ªë ng∆∞·ªùi", "Gi√° v√©"), show="headings", selectmode="extended")
        tree.heading("ID", text="ID")
        tree.heading("T√™n", text="T√™n s·ª± ki·ªán")
        tree.heading("Ng√†y", text="Ng√†y di·ªÖn ra")
        tree.heading("ƒê·ªãa ƒëi·ªÉm", text="ƒê·ªãa ƒëi·ªÉm")
        tree.heading("M√¥ t·∫£", text="M√¥ t·∫£")
        tree.heading("S·ªë ng∆∞·ªùi", text="S·ªë ng∆∞·ªùi t·ªëi ƒëa")
        tree.heading("Gi√° v√©", text="Gi√° v√© (VND)")
        tree.column("ID", width=50)
        tree.column("M√¥ t·∫£", width=300)
        tree.column("S·ªë ng∆∞·ªùi", width=100)
        tree.column("Gi√° v√©", width=100)
        tree.pack(fill=BOTH, expand=True, padx=10, pady=10)

        for i, event in enumerate(events, 1):
            tree.insert("", "end", values=(
                f"Temp-{i}",
                event['name'],
                event['date'],
                event['location'],
                event['description'],
                event['capacity'],
                f"{event['price']:,}"
            ))

        buttons_frame = Frame(import_window, bg="#0078D7")
        buttons_frame.pack(pady=10)

        Button(buttons_frame, text="Nh·∫≠p s·ª± ki·ªán ƒë√£ ch·ªçn",
               command=lambda: self.import_selected_events(tree, events), bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)
        Button(buttons_frame, text="ƒê√≥ng", command=import_window.destroy, bg="#FFFFFF", fg="#0078D7").pack(side=LEFT, padx=5)

    def import_selected_events(self, tree, imported_events):
        """Nh·∫≠p c√°c s·ª± ki·ªán ƒë√£ ch·ªçn t·ª´ web (ch·ªâ d√†nh cho admin)"""
        selected_items = tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·ª± ki·ªán ƒë·ªÉ nh·∫≠p")
            return

        events = self.load_events()
        new_id = max([int(e['id']) for e in events] or [0]) + 1
        initial_new_id = new_id

        for item in selected_items:
            index = tree.index(item)
            event_data = imported_events[index]

            try:
                datetime.strptime(event_data['date'], "%d/%m/%Y")
            except ValueError:
                messagebox.showwarning("C·∫£nh b√°o", f"S·ª± ki·ªán '{event_data['name']}' c√≥ ng√†y kh√¥ng h·ª£p l·ªá, b·ªè qua.")
                continue

            events.append({
                "id": str(new_id),
                "name": event_data['name'],
                "date": event_data['date'],
                "location": event_data['location'],
                "capacity": event_data['capacity'],
                "price": event_data['price'],
                "current_participants": 0,
                "description": event_data['description'],
                "created_by": self.current_user
            })
            new_id += 1

        if new_id > initial_new_id:
            self.save_events(events)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ nh·∫≠p {new_id - initial_new_id} s·ª± ki·ªán th√†nh c√¥ng")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c nh·∫≠p do l·ªói d·ªØ li·ªáu")
        self.show_events()

    def accept_event_requests(self):
        """Ch·∫•p nh·∫≠n c√°c y√™u c·∫ßu s·ª± ki·ªán ƒë√£ ch·ªçn (ch·ªâ d√†nh cho admin)"""
        if self.user_role != "admin":
            messagebox.showerror("L·ªói", "Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ quy·ªÅn x·ª≠ l√Ω y√™u c·∫ßu")
            return

        selected_items = self.requests_tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt y√™u c·∫ßu ƒë·ªÉ ch·∫•p nh·∫≠n")
            return

        requests = self.load_requests()
        events = self.load_events()
        new_id = max([int(e['id']) for e in events] or [0]) + 1
        accepted_count = 0

        for item in selected_items:
            request_id = self.requests_tree.item(item)['values'][0]
            request = next((r for r in requests if r['id'] == request_id), None)

            if not request:
                messagebox.showwarning("C·∫£nh b√°o", f"Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu v·ªõi ID {request_id}")
                continue

            try:
                datetime.strptime(request['date'], "%d/%m/%Y")
            except ValueError:
                messagebox.showwarning("C·∫£nh b√°o", f"Y√™u c·∫ßu '{request['name']}' c√≥ ng√†y kh√¥ng h·ª£p l·ªá, b·ªè qua.")
                continue

            events.append({
                "id": str(new_id),
                "name": request['name'],
                "date": request['date'],
                "location": request['location'],
                "capacity": request['capacity'],
                "price": request['price'],
                "current_participants": 0,
                "description": request['description'],
                "created_by": request['requested_by']
            })
            requests = [r for r in requests if r['id'] != request_id]
            new_id += 1
            accepted_count += 1

        if accepted_count > 0:
            self.save_events(events)
            self.save_requests(requests)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ ch·∫•p nh·∫≠n {accepted_count} y√™u c·∫ßu s·ª± ki·ªán")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ y√™u c·∫ßu n√†o ƒë∆∞·ª£c ch·∫•p nh·∫≠n do l·ªói d·ªØ li·ªáu")
        self.load_requests_to_tree()

    def reject_event_requests(self):
        """T·ª´ ch·ªëi c√°c y√™u c·∫ßu s·ª± ki·ªán ƒë√£ ch·ªçn (ch·ªâ d√†nh cho admin)"""
        if self.user_role != "admin":
            messagebox.showerror("L·ªói", "Ch·ªâ qu·∫£n tr·ªã vi√™n m·ªõi c√≥ quy·ªÅn x·ª≠ l√Ω y√™u c·∫ßu")
            return

        selected_items = self.requests_tree.selection()
        if not selected_items:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt y√™u c·∫ßu ƒë·ªÉ t·ª´ ch·ªëi")
            return

        requests = self.load_requests()
        rejected_count = 0

        for item in selected_items:
            request_id = self.requests_tree.item(item)['values'][0]
            requests = [r for r in requests if r['id'] != request_id]
            rejected_count += 1

        if rejected_count > 0:
            self.save_requests(requests)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t·ª´ ch·ªëi {rejected_count} y√™u c·∫ßu s·ª± ki·ªán")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ y√™u c·∫ßu n√†o ƒë∆∞·ª£c t·ª´ ch·ªëi")
        self.load_requests_to_tree()

    def clear_window(self):
        """X√≥a t·∫•t c·∫£ c√°c widget kh·ªèi c·ª≠a s·ªï"""
        for widget in self.root.winfo_children():
            widget.destroy()
        try:
            self.root.config(menu=Menu(self.root, bg="#0078D7", fg="#FFFFFF"))
        except:
            pass

if __name__ == "__main__":
    root = Tk()
    app = EventManagementApp(root)
    root.mainloop()